
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System;
using System.Diagnostics;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Locale definitions (keyboard layout)
    /// </summary>
    public enum LocaleSelection
    {
        EN_US,
        EN_GB,
    }

    /// <summary>
    /// Main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Static/Const Variables

        private static int COLUMNS_MAX = 95;
        private static int ROWS_MAX = 35;

        private static TexploitGame self_reference = null;

        #endregion
        
        #region Fields

        private GraphicsDeviceManager graphics;
        private SpriteBatch spriteBatch;
        private SpriteFont font;
        private KeyboardState key_state_prev;
        private char[,] ascii_ui;
        private bool should_exit;

        private Stopwatch cursor_redraw_stopwatch;
        private bool should_draw_cursor;
        private bool cursor_redraw_state;

        private LocaleSelection locale;
        private Color bgcolour;
        private Color fgcolour;

        private string editor_file_name;

        #endregion

        #region Constructor

        public TexploitGame()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            this.IsMouseVisible = true;
            this.Window.Title = "Texploit - Entry for the Moosader Gamedev Compo #7: \"Text-based game\"";
            this.Window.AllowUserResizing = false;
            this.SetResolution(768, 432);
            this.ascii_ui = new char[ROWS_MAX, COLUMNS_MAX];
            this.should_exit = false;
            this.should_draw_cursor = false;
            this.cursor_redraw_state = false;
            this.cursor_redraw_stopwatch = new Stopwatch();
            this.locale = LocaleSelection.EN_US;
            this.bgcolour = Color.Black;
            this.fgcolour = Color.LightPink;
            this.editor_file_name = string.Empty;
            this.cursor_redraw_stopwatch.Start();
            TexploitGame.self_reference = this;
        }

        #endregion

        #region Override Methods

        protected override void Initialize()
        {
            this.Clear(' ');
            this.InitializeUI();
            base.Initialize();
        }

        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);
            font = Content.Load<SpriteFont>("Unifont");
            font.LineSpacing = 12; font.Spacing = 0;
        }

        protected override void UnloadContent()
        {
        }

        protected override void Update(GameTime gameTime)
        {
            KeyboardState key_state = Keyboard.GetState();
            if (this.should_exit || (key_state.IsKeyDown(Keys.Escape) && !this.key_state_prev.IsKeyDown(Keys.Escape)))
                this.Exit();
            this.UpdateUI(key_state);
            this.key_state_prev = key_state;
            base.Update(gameTime);
        }

        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(this.bgcolour);
            spriteBatch.Begin();
            this.DrawUI();
            for (int cur_y = 0; cur_y < this.ascii_ui.GetLength(0); cur_y++)
            {
                string row = string.Empty;
                for (int cur_x = 0; cur_x < this.ascii_ui.GetLength(1); cur_x++)
                    row += this.ascii_ui[cur_y, cur_x];
                spriteBatch.DrawString(font, row, new Vector2(4, (cur_y * font.LineSpacing) + 3), this.fgcolour);
            }
            if (this.should_draw_cursor)
            {
                if (this.cursor_redraw_stopwatch.ElapsedMilliseconds > 450)
                {
                    this.cursor_redraw_state = !this.cursor_redraw_state;
                    this.cursor_redraw_stopwatch.Restart();
                }
                if (this.cursor_redraw_state)
                {
                    int cursor_x = ((int)(Math.Floor(((float)this.x / (float)COLUMNS_MAX) * 760)) + 4) + ((this.state == GameState.EDITOR_STATE) ? -4 : 0);
                    int cursor_y = ((int)(Math.Floor(((float)this.y / (float)ROWS_MAX) * 421)) + 5) + ((this.state == GameState.EDITOR_STATE) ? - 2 : 0);
                    spriteBatch.DrawString(font, ((this.state == GameState.EDITOR_STATE) ? "|" : "_"), new Vector2(cursor_x, cursor_y), this.fgcolour);
                }
            }
            spriteBatch.End();
            base.Draw(gameTime);
        }

        protected override void OnExiting(object sender, EventArgs args)
        {
            base.OnExiting(sender, args);
            if (this.remote_app_domain != null)
                AppDomain.Unload(this.remote_app_domain);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Set game to a given resolution
        /// </summary>
        private void SetResolution(int x, int y)
        {
            this.graphics.PreferredBackBufferWidth = x;
            this.graphics.PreferredBackBufferHeight = y;
        }

        #endregion

        #region Public Methods

        public static TexploitGame GetInstance()
        {
            return TexploitGame.self_reference;
        }

        #endregion
    }
}
