
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System;
using System.Diagnostics;
using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Title specific game state handling for the main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Fields

        private Stopwatch title_redraw_stopwatch;
        private char[,] title_effects_map;

        #endregion

        #region Private Methods

        private void TitleState_Initialize()
        {
            if (this.state != GameState.TITLE_STATE) return;
            this.title_redraw_stopwatch = new Stopwatch();
            this.title_redraw_stopwatch.Start();
            this.title_effects_map = new char[ROWS_MAX, COLUMNS_MAX];
            for (int cur_y = 0; cur_y < this.title_effects_map.GetLength(0); cur_y++)
                for (int cur_x = 0; cur_x < this.title_effects_map.GetLength(1); cur_x++)
                    this.title_effects_map[cur_y, cur_x] = '\0';
            this.DrawInitialTitleScreen();
        }

        private void DrawInitialTitleScreen()
        {
            this.DrawBorder(1, 1, COLUMNS_MAX - 2, ROWS_MAX - 1);
            this.DrawBorder(3, 2, COLUMNS_MAX - 6, ROWS_MAX - 3);
            this.DrawHorizontalLine(40, 14, 15);
            this.SetCursorPosition(36, 16);
            this.Write(".-: T E X P L O I T :-.");
            this.DrawHorizontalLine(34, 18, 27);
            this.SetCursorPosition(26, 20);
            this.Write("p r e s s    e n t e r    t o    s t a r t !");
            this.AddTitleEffects();
        }

        private void TitleState_Update(KeyboardState key_state)
        {
            if (this.state != GameState.TITLE_STATE) return;
            if (key_state.IsKeyDown(Keys.Enter) && !this.key_state_prev.IsKeyDown(Keys.Enter))
                this.TitleState_SetNextState(GameState.MENU_MAIN_STATE);
        }

        private void TitleState_Draw()
        {
            if (this.state != GameState.TITLE_STATE) return;
            if (title_redraw_stopwatch.ElapsedMilliseconds > 150)
            {
                this.ClearTitleEffects();
                this.AddTitleEffects();
                this.title_redraw_stopwatch.Restart();
            }
        }

        private void TitleState_SetNextState(GameState state)
        {
            this.state = state;
            this.TitleState_Destroy();
            this.InitializeUI();
        }

        private void TitleState_Destroy()
        {
            this.Clear(' ');
            this.title_redraw_stopwatch = null;
            this.title_effects_map = null;
        }

        #endregion

        #region Effects Methods

        private void ClearTitleEffects()
        {
            for (int cur_y = 0; cur_y < this.title_effects_map.GetLength(0); cur_y++)
                for (int cur_x = 0; cur_x < this.title_effects_map.GetLength(1); cur_x++)
                    if (this.title_effects_map[cur_y, cur_x] != '\0')
                    {
                        this.ascii_ui[cur_y, cur_x] = this.title_effects_map[cur_y, cur_x];
                        this.title_effects_map[cur_y, cur_x] = '\0';
                    }
        }

        private void AddTitleEffects()
        {
            Random r = new Random();
            int x, y = 0;
            int b = 0;
            for (int i = 0; i <= 40; i++)
            {
                x = r.Next(5, COLUMNS_MAX - 5);
                y = r.Next(4, ROWS_MAX - 4);
                if (this.title_effects_map[y, x] != '\0') continue;
                this.title_effects_map[y, x] = this.ascii_ui[y, x];
                if (b == 0) b = 1;
                else b = 0;
                this.ascii_ui[y, x] = b.ToString()[0];
            }
        }

        #endregion
    }
}
