
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Game states
    /// </summary>
    public enum GameState
    {
        TITLE_STATE,
        MENU_MAIN_STATE,
        TUTORIAL_STATE,
        LEVEL_SELECT_STATE,
        LEVEL_STATE,
        SYNOPSIS_STATE,
        CASE_QUERY_STATE,
        INTERPRETER_STATE,
        EDITOR_STATE,
        LEVEL_COMPLETE_STATE,
        END_STATE,
        NULL_STATE,
    }

    /// <summary>
    /// Game state handling for the main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Fields

        private GameState state = GameState.TITLE_STATE;

        #endregion

        #region Private Methods

        private void InitializeUI()
        {
            switch (this.state)
            {
                case GameState.TITLE_STATE:
                    this.TitleState_Initialize();
                    break;
                case GameState.MENU_MAIN_STATE:
                    this.MenuMainState_Initialize();
                    break;
                case GameState.TUTORIAL_STATE:
                    this.TutorialState_Initialize();
                    break;
                case GameState.LEVEL_SELECT_STATE:
                    this.LevelSelectState_Initialize();
                    break;
                case GameState.LEVEL_STATE:
                    this.LevelState_Initialize();
                    break;
                case GameState.SYNOPSIS_STATE:
                    this.SynopsisState_Initialize();
                    break;
                case GameState.CASE_QUERY_STATE:
                    this.CaseQueryState_Initialize();
                    break;
                case GameState.INTERPRETER_STATE:
                    this.InterpreterState_Initialize();
                    break;
                case GameState.EDITOR_STATE:
                    this.EditorState_Initialize();
                    break;
                default:
                    break;
            }
        }

        private void UpdateUI(KeyboardState key_state)
        {
            switch (this.state)
            {
                case GameState.TITLE_STATE:
                    this.TitleState_Update(key_state);
                    break;
                case GameState.MENU_MAIN_STATE:
                    this.MenuMainState_Update(key_state);
                    break;
                case GameState.TUTORIAL_STATE:
                    this.TutorialState_Update(key_state);
                    break;
                case GameState.LEVEL_SELECT_STATE:
                    this.LevelSelectState_Update(key_state);
                    break;
                case GameState.LEVEL_STATE:
                    this.LevelState_Update(key_state);
                    break;
                case GameState.SYNOPSIS_STATE:
                    this.SynopsisState_Update(key_state);
                    break;
                case GameState.CASE_QUERY_STATE:
                    this.CaseQueryState_Update(key_state);
                    break;
                case GameState.INTERPRETER_STATE:
                    this.InterpreterState_Update(key_state);
                    break;
                case GameState.EDITOR_STATE:
                    this.EditorState_Update(key_state);
                    break;
                default:
                    break;
            }
        }

        private void DrawUI()
        {
            switch (this.state)
            {
                case GameState.TITLE_STATE:
                    this.TitleState_Draw();
                    break;
                case GameState.MENU_MAIN_STATE:
                    this.MenuMainState_Draw();
                    break;
                case GameState.TUTORIAL_STATE:
                    this.TutorialState_Draw();
                    break;
                case GameState.LEVEL_SELECT_STATE:
                    this.LevelSelectState_Draw();
                    break;
                case GameState.LEVEL_STATE:
                    this.LevelState_Draw();
                    break;
                case GameState.SYNOPSIS_STATE:
                    this.SynopsisState_Draw();
                    break;
                case GameState.CASE_QUERY_STATE:
                    this.CaseQueryState_Draw();
                    break;
                case GameState.INTERPRETER_STATE:
                    this.InterpreterState_Draw();
                    break;
                case GameState.EDITOR_STATE:
                    this.EditorState_Draw();
                    break;
                default:
                    break;
            }
        }

        #endregion
    }
}
