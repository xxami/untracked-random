
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Main menu states
    /// </summary>
    public enum MenuMainState
    {
        TUTORIAL_STATE,
        START_GAME_STATE,
        EXIT_STATE,
    }

    /// <summary>
    /// Main menu data struct
    /// </summary>
    public class MenuMainData
    {
        public string text = string.Empty;
        public int x = 0;
        public int y = 0;
        public int w = 0;
        public MenuMainState state;

        public MenuMainData(string text, int x, int y, MenuMainState state)
        {
            this.text = text; this.x = x; this.y = y; this.w = text.Length; this.state = state;
        }
    }

    /// <summary>
    /// Main menu specific game state handling for the main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Fields

        private List<MenuMainData> menu_data;
        private int menu_ptr;
        private Stopwatch menu_redraw_stopwatch;
        private int menu_fx_state;

        #endregion

        #region Private Methods

        private void MenuMainState_Initialize()
        {
            if (this.state != GameState.MENU_MAIN_STATE) return;
            this.menu_data = new List<MenuMainData>();
            this.menu_ptr = 0;
            this.menu_fx_state = 0;
            this.menu_redraw_stopwatch = new Stopwatch();
            this.menu_redraw_stopwatch.Start();
            this.DrawInitialMenuMainScreen();
        }

        private void DrawInitialMenuMainScreen()
        {
            this.DrawBorder(1, 1, COLUMNS_MAX - 2, ROWS_MAX - 1);
            this.DrawBorder(3, 2, COLUMNS_MAX - 6, ROWS_MAX - 3);
            this.SetCursorPosition(7, 5);
            this.Write("Select an option from the menu:");
            this.AddMenuItem(46, 12, "T U T O R I A L !", MenuMainState.TUTORIAL_STATE);
            this.AddMenuItem(38, 16, "S T A R T    G A M E !", MenuMainState.START_GAME_STATE);
            this.AddMenuItem(31, 20, "E X I T !", MenuMainState.EXIT_STATE);
            this.AddMenuEffects();
        }

        private void MenuMainState_Update(KeyboardState key_state)
        {
            if (this.state != GameState.MENU_MAIN_STATE) return;
            if (key_state.IsKeyDown(Keys.Back) && !this.key_state_prev.IsKeyDown(Keys.Back))
            {
                this.MenuMainState_SetNextState(GameState.TITLE_STATE);
                return;
            }
            if (key_state.IsKeyDown(Keys.Enter) && !this.key_state_prev.IsKeyDown(Keys.Enter))
            {
                this.MenuSelect(this.menu_data[this.menu_ptr]);
                return;
            }
            int last_menu_ptr = this.menu_ptr;
            if (key_state.IsKeyDown(Keys.Down) && !this.key_state_prev.IsKeyDown(Keys.Down))
            {
                if (this.menu_ptr+1 >= this.menu_data.Count)
                    this.menu_ptr = 0;
                else this.menu_ptr++;
            }
            if (key_state.IsKeyDown(Keys.Up) && !this.key_state_prev.IsKeyDown(Keys.Up))
            {
                if (this.menu_ptr == 0) this.menu_ptr = this.menu_data.Count - 1;
                else this.menu_ptr--;
            }
            if (this.menu_ptr != last_menu_ptr)
            {
                this.ClearMenuEffects(last_menu_ptr);
                this.AddMenuEffects();
            }
        }

        private void MenuMainState_Draw()
        {
            if (this.state != GameState.MENU_MAIN_STATE) return;
            if (this.menu_redraw_stopwatch.ElapsedMilliseconds > 100)
            {
                this.AddMenuEffects();
                this.menu_redraw_stopwatch.Restart();
            }
        }

        private void MenuMainState_SetNextState(GameState state)
        {
            this.state = state;
            this.MenuMainState_Destroy();
            this.InitializeUI();
        }

        private void MenuMainState_Destroy()
        {
            this.Clear(' ');
            this.menu_data = null;
            this.menu_redraw_stopwatch = null;
            this.menu_ptr = 0;
            this.menu_fx_state = 0;
        }

        #endregion

        #region Menu Methods

        private void AddMenuItem(int x, int y, string text, MenuMainState state)
        {
            this.SetCursorPosition(x, y);
            this.Write(text);
            MenuMainData data = new MenuMainData(text, x, y, state);
            this.menu_data.Add(data);
        }

        private void AddMenuEffects()
        {
            if (this.menu_ptr < this.menu_data.Count)
            {
                int x = this.menu_data[this.menu_ptr].x - 4;
                int y = this.menu_data[this.menu_ptr].y;
                if (x < 1 || y < 1) return;
                else
                {
                    this.SetCursorPosition(x, y);
                    this.Write("*");

                    switch (this.menu_fx_state)
                    {
                        case 0:
                            this.SetCursorPosition(x - 1, y - 1);
                            this.Write(" ");
                            this.SetCursorPosition(x + 1, y + 1);
                            this.Write(" ");
                            this.SetCursorPosition(x - 1, y);
                            this.Write("*");
                            this.SetCursorPosition(x + 1, y);
                            this.Write("*");
                            break;
                        case 1:
                            this.SetCursorPosition(x - 1, y);
                            this.Write(" ");
                            this.SetCursorPosition(x + 1, y);
                            this.Write(" ");
                            this.SetCursorPosition(x - 1, y + 1);
                            this.Write("*");
                            this.SetCursorPosition(x + 1, y - 1);
                            this.Write("*");
                            break;
                        case 2:
                            this.SetCursorPosition(x - 1, y + 1);
                            this.Write(" ");
                            this.SetCursorPosition(x + 1, y - 1);
                            this.Write(" ");
                            this.SetCursorPosition(x, y - 1);
                            this.Write("*");
                            this.SetCursorPosition(x, y + 1);
                            this.Write("*");
                            break;
                        case 3:
                            this.SetCursorPosition(x, y - 1);
                            this.Write(" ");
                            this.SetCursorPosition(x, y + 1);
                            this.Write(" ");
                            this.SetCursorPosition(x - 1, y - 1);
                            this.Write("*");
                            this.SetCursorPosition(x + 1, y + 1);
                            this.Write("*");
                            break;
                        default:
                            break;
                    }
                    if (this.menu_fx_state >= 3) this.menu_fx_state = 0;
                    else this.menu_fx_state++;
                }
            }
        }

        private void ClearMenuEffects(int last_menu_ptr)
        {
            MenuMainData data = menu_data[last_menu_ptr];
            this.Clear(' ', data.x - 5, data.y - 1, 3, 3);
        }

        private void MenuSelect(MenuMainData menu_data)
        {
            switch (menu_data.state)
            {
                case MenuMainState.TUTORIAL_STATE:
                    this.MenuMainState_SetNextState(GameState.TUTORIAL_STATE);
                    break;
                case MenuMainState.START_GAME_STATE:
                    this.MenuMainState_SetNextState(GameState.LEVEL_SELECT_STATE);
                    break;
                case MenuMainState.EXIT_STATE:
                    this.should_exit = true;
                    break;
                default:
                    break;
            }
        }

        #endregion
    }
}
