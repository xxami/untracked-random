
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Level selection menu states
    /// </summary>
    public enum LevelSelectState
    {
        LEVEL_ONE,
        LEVEL_TWO,
        LEVEL_THREE,
        LEVEL_FOUR,
        LEVEL_FIVE,
    }

    /// <summary>
    /// Level locked/unlocked states
    /// </summary>
    public enum LevelState
    {
        UNLOCKED,
        LOCKED,
    }

    /// <summary>
    /// Main menu data struct
    /// </summary>
    public class LevelSelectData
    {
        public string text = string.Empty;
        public LevelSelectState state;
        public LevelState lstate;

        public LevelSelectData(string text, LevelSelectState state, LevelState lstate)
        {
            this.text = text; this.state = state; this.lstate = lstate;
        }
    }

    /// <summary>
    /// Main game specific game state handling for the main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Fields

        private List<LevelSelectData> level_select_data;
        private int level_select_ptr;
        private Stopwatch level_select_redraw_stopwatch;
        private int level_select_fx_state;

        #endregion

        #region Private Methods

        private void LevelSelectState_Initialize()
        {
            if (this.state != GameState.LEVEL_SELECT_STATE) return;
            this.level_select_data = new List<LevelSelectData>();
            this.level_select_ptr = 0;
            this.level_select_fx_state = 0;
            this.level_select_redraw_stopwatch = new Stopwatch();
            this.level_select_redraw_stopwatch.Start();
            this.DrawInitialLevelSelectScreen();
        }

        private void DrawInitialLevelSelectScreen()
        {
            this.DrawBorder(1, 1, COLUMNS_MAX - 2, ROWS_MAX - 1);
            this.DrawBorder(3, 2, COLUMNS_MAX - 6, ROWS_MAX - 3);
            this.SetCursorPosition(7, 5);
            this.Write("Select a level:");
            // todo: check if levels are locked/unlocked~ ~(^^~)
            this.AddLevelSelectItem("L E V E L    O N E !", LevelSelectState.LEVEL_ONE, LevelState.UNLOCKED);
            this.AddLevelSelectItem("L E V E L    T W O !", LevelSelectState.LEVEL_TWO, LevelState.LOCKED);
            this.AddLevelSelectItem("L E V E L    T H R E E !", LevelSelectState.LEVEL_THREE, LevelState.LOCKED);
            this.AddLevelSelectItem("L E V E L    F O U R !", LevelSelectState.LEVEL_FOUR, LevelState.LOCKED);
            this.AddLevelSelectItem("L E V E L    F I V E !", LevelSelectState.LEVEL_FIVE, LevelState.LOCKED);
            this.AddLevelSelectEffects();
            this.AddLevelSelectText();
        }

        private void LevelSelectState_Update(KeyboardState key_state)
        {
            if (this.state != GameState.LEVEL_SELECT_STATE) return;
            if (this.KeyPressed(key_state, Keys.Enter))
                this.LevelSelect(this.level_select_data[this.level_select_ptr]);
            if (this.KeyPressed(key_state, Keys.Back))
                this.LevelSelectState_SetNextState(GameState.MENU_MAIN_STATE);
            int last_level_select_ptr = this.level_select_ptr;
            if (this.KeyPressed(key_state, Keys.Up))
            {
                if (this.level_select_ptr == 0)
                    this.level_select_ptr = this.level_select_data.Count - 1;
                else this.level_select_ptr--;
            }
            if (this.KeyPressed(key_state, Keys.Down))
            {
                if (this.level_select_ptr == this.level_select_data.Count - 1)
                    this.level_select_ptr = 0;
                else this.level_select_ptr++;
            }
            if (this.level_select_ptr != last_level_select_ptr)
            {
                this.ClearLevelSelectText();
                this.AddLevelSelectText();
            }
        }

        private void LevelSelectState_Draw()
        {
            if (this.state != GameState.LEVEL_SELECT_STATE) return;
            if (this.level_select_redraw_stopwatch.ElapsedMilliseconds >= 150)
            {
                this.AddLevelSelectEffects();
                this.level_select_redraw_stopwatch.Restart();
            }
        }

        private void LevelSelectState_SetNextState(GameState state)
        {
            this.state = state;
            this.LevelSelectState_Destroy();
            this.InitializeUI();
        }

        private void LevelSelectState_Destroy()
        {
            this.Clear(' ');
            this.level_select_data = null;
            this.level_select_redraw_stopwatch = null;
            this.level_select_ptr = 0;
            this.level_select_fx_state = 0;
        }

        #endregion

        #region Level Select Methods

        private void AddLevelSelectItem(string text, LevelSelectState state, LevelState lstate)
        {
            LevelSelectData data = new LevelSelectData(text, state, lstate);
            this.level_select_data.Add(data);
        }

        private void AddLevelSelectEffects()
        {
            int x = 34;
            int y = 16;
            this.SetCursorPosition(x, y);
            this.Write("*");

            switch (this.level_select_fx_state)
            {
                case 0:
                    this.SetCursorPosition(x - 1, y - 1);
                    this.Write(" ");
                    this.SetCursorPosition(x + 1, y + 1);
                    this.Write(" ");
                    this.SetCursorPosition(x - 1, y);
                    this.Write("*");
                    this.SetCursorPosition(x + 1, y);
                    this.Write("*");
                    break;
                case 1:
                    this.SetCursorPosition(x - 1, y);
                    this.Write(" ");
                    this.SetCursorPosition(x + 1, y);
                    this.Write(" ");
                    this.SetCursorPosition(x - 1, y + 1);
                    this.Write("*");
                    this.SetCursorPosition(x + 1, y - 1);
                    this.Write("*");
                    break;
                case 2:
                    this.SetCursorPosition(x - 1, y + 1);
                    this.Write(" ");
                    this.SetCursorPosition(x + 1, y - 1);
                    this.Write(" ");
                    this.SetCursorPosition(x, y - 1);
                    this.Write("*");
                    this.SetCursorPosition(x, y + 1);
                    this.Write("*");
                    break;
                case 3:
                    this.SetCursorPosition(x, y - 1);
                    this.Write(" ");
                    this.SetCursorPosition(x, y + 1);
                    this.Write(" ");
                    this.SetCursorPosition(x - 1, y - 1);
                    this.Write("*");
                    this.SetCursorPosition(x + 1, y + 1);
                    this.Write("*");
                    break;
                default:
                    break;
            }
            if (this.level_select_fx_state >= 3) this.level_select_fx_state = 0;
            else this.level_select_fx_state++;
        }

        private void AddLevelSelectText()
        {
            if (this.level_select_data.Count == 0) return;
            else if (this.level_select_ptr == 0)
            {
                this.SetCursorPosition(38, 16);
                this.Write(this.level_select_data[this.level_select_ptr].text);
                if (this.level_select_data.Count > 1)
                {
                    this.SetCursorPosition(31, 20);
                    this.Write(this.level_select_data[this.level_select_ptr + 1].text);
                }
            }
            else if (this.level_select_ptr == (this.level_select_data.Count - 1))
            {
                this.SetCursorPosition(38, 16);
                this.Write(this.level_select_data[this.level_select_ptr].text);
                this.SetCursorPosition(46, 12);
                this.Write(this.level_select_data[this.level_select_ptr - 1].text);
            }
            else
            {
                this.SetCursorPosition(38, 16);
                this.Write(this.level_select_data[this.level_select_ptr].text);
                this.SetCursorPosition(46, 12);
                this.Write(this.level_select_data[this.level_select_ptr - 1].text);
                this.SetCursorPosition(31, 20);
                this.Write(this.level_select_data[this.level_select_ptr + 1].text);
            }
            this.SetLevelSelectStatus();
        }

        private void SetLevelSelectStatus()
        {
            if (this.level_select_data[this.level_select_ptr].lstate == LevelState.UNLOCKED)
            {
                this.SetCursorPosition(56, ROWS_MAX - 6);
                this.Write("Press enter to start the level!");
            }
            else
            {
                this.SetCursorPosition(61, ROWS_MAX - 6);
                this.Write("This level is locked, >w<!");
            }
        }

        private void ClearLevelSelectText()
        {
            this.Clear(' ', 31, 20, 30, 1);
            this.Clear(' ', 46, 12, 30, 1);
            this.Clear(' ', 38, 16, 30, 1);
            this.Clear(' ', 56, ROWS_MAX - 6, 32, 1);
        }

        private void LevelSelect(LevelSelectData level_data)
        {
            if (level_data.lstate == LevelState.LOCKED) return;
            this.InitializeLevel(level_data.state);
            this.LevelSelectState_SetNextState(GameState.LEVEL_STATE);
        }

        #endregion
    }
}
