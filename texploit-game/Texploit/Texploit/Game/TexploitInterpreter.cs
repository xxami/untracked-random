
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Interpreter state handling for the main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Fields

        private Stopwatch interpreter_backspace_stopwatch;
        private int interpreter_backspace_stopwatch_time;

        private Rectangle? interpreter_bounds;

        private List<string> interpreter_buffer;
        private string interpreter_input_buffer;

        private List<string> interpreter_cmd_history;
        private int interpreter_cmd_history_ptr;

        #endregion

        #region Private Methods

        private void InterpreterState_Initialize()
        {
            if (this.state != GameState.INTERPRETER_STATE) return;
            this.DrawInitialInterpreterScreen();
        }

        private void DrawInitialInterpreterScreen()
        {
            this.interpreter_bounds = new Rectangle(5, 4, COLUMNS_MAX - 11, ROWS_MAX - 8);
            this.interpreter_buffer = new List<string>();
            this.interpreter_input_buffer = string.Empty;
            this.interpreter_cmd_history = new List<string>();
            this.interpreter_cmd_history_ptr = 0;
            this.interpreter_backspace_stopwatch = new Stopwatch();
            this.interpreter_backspace_stopwatch_time = 300;
            this.interpreter_backspace_stopwatch.Start();
            this.DrawBorder(1, 1, COLUMNS_MAX - 2, ROWS_MAX - 1);
            this.DrawBorder(3, 2, COLUMNS_MAX - 6, ROWS_MAX - 3);
            this.SetCursorPosition(this.interpreter_bounds.Value.X - 2, 1);
            this.Write("TexTerm 1.0");
            this.SetCursorPosition(this.interpreter_bounds.Value.X - 2, this.interpreter_bounds.Value.Bottom + 2);
            this.Write("Type \'exit\' to exit", false);
            this.SetCursorPosition(this.interpreter_bounds.Value.X, this.interpreter_bounds.Value.Y);
            this.Interpreter_PushString("player@texploit:~/" + this.current_level_shortname + "$ ");
            this.should_draw_cursor = true;
        }

        private void InterpreterState_Update(KeyboardState key_state)
        {
            if (this.state != GameState.INTERPRETER_STATE) return;
            if (this.remote_app_thread != null)
            {
                if (!this.remote_app_thread.IsAlive)
                {
                    this.remote_app_thread = null;
                    if (this.remote_app_domain != null)
                    {
                        try
                        {
                            AppDomain.Unload(this.remote_app_domain);
                            this.remote_app_domain = null;
                        }
                        catch { }
                    }
                    this.Interpreter_PushString("player@texploit:~/" + this.current_level_shortname + "$ ");
                }
                else if ((key_state.IsKeyDown(Keys.LeftControl) || key_state.IsKeyDown(Keys.RightControl)) && this.KeyPressed(key_state, Keys.C))
                {
                    if (this.remote_app_domain != null)
                    {
                        try
                        {
                            AppDomain.Unload(this.remote_app_domain);
                            this.remote_app_domain = null;
                            this.remote_app_thread = null;
                        }
                        catch { return; }
                    }
                    this.remote_app_thread = null;
                    this.Interpreter_PushString("player@texploit:~/" + this.current_level_shortname + "$ ");
                    return;
                }
                else return;
            }

            if (this.KeyPressed(key_state, Keys.Enter))
            {
                this.InterpretInput(this.interpreter_input_buffer);
                this.interpreter_input_buffer = string.Empty;
            }
            if (this.KeyPressed(key_state, Keys.Up))
            {
                if (this.interpreter_cmd_history.Count > 0)
                {
                    if (this.interpreter_cmd_history_ptr > 0) this.interpreter_cmd_history_ptr--;
                    this.Interpreter_DoFullBackSpace();
                    this.Interpreter_TryAcceptCharacter(this.interpreter_cmd_history[this.interpreter_cmd_history_ptr]);
                }
            }
            if (this.KeyPressed(key_state, Keys.Down))
            {
                if (this.interpreter_cmd_history.Count > 0)
                {
                    if (this.interpreter_cmd_history_ptr < (this.interpreter_cmd_history.Count - 1)) this.interpreter_cmd_history_ptr++;
                    this.Interpreter_DoFullBackSpace();
                    this.Interpreter_TryAcceptCharacter(this.interpreter_cmd_history[this.interpreter_cmd_history_ptr]);
                }
            }
            if (this.KeyPressed(key_state, Keys.Back))
            {
                this.Interpreter_DoBackSpace();
                this.interpreter_backspace_stopwatch_time = 300;
                this.interpreter_backspace_stopwatch.Restart();
            }
            else if (key_state.IsKeyDown(Keys.Back))
            {
                if (this.interpreter_backspace_stopwatch.ElapsedMilliseconds > this.interpreter_backspace_stopwatch_time)
                {
                    this.Interpreter_DoBackSpace();
                    this.interpreter_backspace_stopwatch_time = 100;
                    this.interpreter_backspace_stopwatch.Restart();
                }
            }

            char text_poll = this.GetChar(key_state);
            if (text_poll != '\0')
            {
                this.Interpreter_TryAcceptCharacter(text_poll.ToString().Replace("\t", "    "));
            }
        }

        private void InterpreterState_Draw()
        {
            if (this.state != GameState.INTERPRETER_STATE) return;
        }

        private void InterpreterState_SetNextState(GameState state)
        {
            this.state = state;
            this.InterpreterState_Destroy();
            this.InitializeUI();
        }

        private void InterpreterState_Destroy()
        {
            this.interpreter_bounds = null;
            this.interpreter_buffer = null;
            this.interpreter_input_buffer = string.Empty;
            this.interpreter_cmd_history = null;
            this.interpreter_cmd_history_ptr = 0;
            this.interpreter_backspace_stopwatch = null;
            this.interpreter_backspace_stopwatch_time = 300;
            this.should_draw_cursor = false;
            this.Clear(' ');
        }

        #endregion

        #region Interpreter Methods

        private void InterpretInput(string cmd)
        {
            if (cmd == string.Empty)
            {
                if (this.interpreter_cmd_history.Count == 0) this.interpreter_cmd_history.Add("");
                this.interpreter_cmd_history_ptr = this.interpreter_cmd_history.Count - 1;
                this.Interpreter_PushString("\n\nUnknown command: " + "null" + "\n\n");
                this.Interpreter_PushString("player@texploit:~/" + this.current_level_shortname + "$ ");
                return;
            }

            if (this.interpreter_cmd_history.Count == 0) this.interpreter_cmd_history.Add("");
            this.interpreter_cmd_history_ptr = this.interpreter_cmd_history.Count - 1;

            if (cmd != this.interpreter_cmd_history[((this.interpreter_cmd_history_ptr -1) < 0) ? 0 : this.interpreter_cmd_history_ptr - 1])
            {
                this.interpreter_cmd_history[this.interpreter_cmd_history_ptr] = cmd;
                this.interpreter_cmd_history.Add("");
                if (this.interpreter_cmd_history.Count > 10) this.interpreter_cmd_history.RemoveAt(0);
                this.interpreter_cmd_history_ptr = this.interpreter_cmd_history.Count - 1;
            }

            GameState? state_redirect = null;
            string[] tokens = cmd.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);
            if (tokens.Length == 0) tokens = new string[] { string.Empty };

            switch (tokens[0])
            {
                // help command
                case "help":
                    if (tokens.Length == 1)
                        this.Interpreter_PushString("\n\nThere's help on the following topics:\n\n\n    exit        set        edit        ls        csc        cat        rm\n\n    clear       exec       inst        uninst    programs\n\n\nType help [topic] for specific information!\n\n");
                    else
                    {
                        switch (tokens[1])
                        {
                            case "programs":
                                this.Interpreter_PushString("\n\nLists all globally installed program files.\n\n");
                                break;
                            case "uninst":
                                this.Interpreter_PushString("\n\nUninstalls a global program file (ie. uninstall app)\n\n");
                                break;
                            case "inst":
                                this.Interpreter_PushString("\n\nInstalls a local program file globally (ie. install app.exe)\n\n");
                                break;
                            case "clear":
                                this.Interpreter_PushString("\n\nClears the terminal screen and removes all command history.\n\n");
                                break;
                            case "exec":
                                this.Interpreter_PushString("\n\nExecutes a local or global program:\n\n\n  - Execute a local program: \'exec program.exe\' or \'./program.exe\'\n\n  - Execute a globally installed program: \'exec program\' or \'program\'\n\n\nBe careful!\n\n");
                                break;
                            case "rm":
                                this.Interpreter_PushString("\n\nRemoves/deletes a file (ie. rm file.ext)\n\n");
                                break;
                            case "csc":
                                this.Interpreter_PushString("\n\nCompiles a C# program from source (ie. csc file.cs)\n\n");
                                break;
                            case "ls":
                                this.Interpreter_PushString("\n\nLists files in the current directory\n\n");
                                break;
                            case "cat":
                                this.Interpreter_PushString("\n\nPrints a files contents (ie. cat file.cs)\n\n");
                                break;
                            case "edit":
                                this.Interpreter_PushString("\n\nOpens a file for editing (ie. edit file.cs)\n\n");
                                break;
                            case "set":
                                this.Interpreter_PushString("\n\nSets an option, valid options are as follows:\n\n\nset locale [ en_gb | en_us ]    - Sets the appropriate keyboard layout\n\nset fgcolour [ #xxxxxx ]        - Sets the foreground colour (ie. #FFFFFF)\n\nset bgcolour [ #xxxxxx ]        - Sets the background colour (ie. #000000)\n\n");
                                break;
                            case "exit":
                                this.Interpreter_PushString("\n\nExits to the main screen.\n\n");
                                break;
                            default:
                                this.Interpreter_PushString("\n\nThere's no such help topic for: " + tokens[1] + "\n\n");
                                break;
                        }
                    }
                    break;

                // csc command
                case "csc":
                    if (tokens.Length <= 1)
                        this.Interpreter_PushString("\n\nNo file specified, see \'help csc\'.\n\n");
                    else
                    {
                        if (this.FileExists(this.current_level_shortname, tokens[1]))
                        {
                            // compile file
                            this.Interpreter_PushString("\n");
                            List<string> lines = this.CompileProgram(this.current_level_shortname, tokens[1]);
                            foreach (string s in lines) this.Interpreter_PushString(s);
                            this.Interpreter_PushString("\n");
                        }
                        else this.Interpreter_PushString("\n\nFile does not exist.\n\n");
                    }
                    break;

                // cat command
                case "cat":
                    if (tokens.Length <= 1)
                        this.Interpreter_PushString("\n\nNo file specified, see \'help cat\'.\n\n");
                    else
                    {
                        if (this.FileExists(this.current_level_shortname, tokens[1]))
                        {
                            this.Interpreter_PushString("\n");
                            List<string> lines = this.GetFile(this.current_level_shortname, tokens[1]);
                            if (lines.Count <= 0) this.Interpreter_PushString("\nEmpty file contents\n");
                            else if (lines.Count == 1 && lines[0].Trim("\n \r".ToCharArray()) == string.Empty) this.Interpreter_PushString("\nEmpty file contents\n");
                            else foreach (string s in lines) this.Interpreter_PushString(this.ReplaceInvalidCharacters(s));
                            this.Interpreter_PushString("\n");
                        }
                        else this.Interpreter_PushString("\n\nFile does not exist.\n\n");
                    }
                    break;

                // ls command
                case "ls":
                    this.Interpreter_PushString("\n");
                    List<string> files = this.GetFiles(this.current_level_shortname);
                    foreach (string s in files)
                        this.Interpreter_PushString("    " + s.Replace(".\\", "") + "\n");
                    if (files.Count <= 0) this.Interpreter_PushString("No files in the current directory.\n");
                    this.Interpreter_PushString("\n");
                    break;

                // rm command
                case "rm":
                    if (tokens.Length == 1)
                        this.Interpreter_PushString("\n\nNothing to remove, see \'help rm\'.\n\n");
                    else
                    {
                        if (this.FileExists(this.current_level_shortname, tokens[1]))
                        {
                            if (this.RemoveFile(this.current_level_shortname, tokens[1]))
                                this.Interpreter_PushString("\n\nSuccessfully removed file \'" + tokens[1] + "\'!\n\n");
                            else this.Interpreter_PushString("\n\nCouldn't remove file (IO error).\n\n");
                        }
                        else this.Interpreter_PushString("\n\nFile does not exist.\n\n");
                    }
                    break;

                // programs command
                case "programs":
                    this.Interpreter_PushString("\n");
                    List<string> installs = this.GetFiles("global");
                    foreach (string s in installs)
                        this.Interpreter_PushString("    " + s.Replace(".\\", "") + "\n");
                    if (installs.Count <= 0) this.Interpreter_PushString("Nothing currently installed.\n");
                    this.Interpreter_PushString("\n");
                    break;

                // uninst command
                case "uninst":
                    if (tokens.Length == 1)
                        this.Interpreter_PushString("\n\nNo file specified in command.\n\n");
                    else
                    {
                        if (this.FileExists("global", tokens[1]))
                        {
                            if (this.RemoveFile("global", tokens[1]))
                                this.Interpreter_PushString("\n\nSuccessfully uninstalled \'" + tokens[1] + "\'!\n\n");
                            else this.Interpreter_PushString("\n\nCouldn't uninstall file (IO error).\n\n");
                        }
                        else this.Interpreter_PushString("\n\nFile does not exist.\n\n");
                    }
                    break;

                // inst command
                case "inst":
                    if (tokens.Length == 1)
                        this.Interpreter_PushString("\n\nNo file specified in command.\n\n");
                    else
                    {
                        if (this.FileExists(this.current_level_shortname, tokens[1]))
                        {
                            this.CreateDirectory("global");
                            if (this.DirectoryExists("global"))
                            {
                                if (!this.FileExists("global", tokens[1].Replace(".exe", "")))
                                {
                                    if (this.CopyFile(this.current_level_shortname, tokens[1], "global", tokens[1].Replace(".exe", "")))
                                    {
                                        this.Interpreter_PushString("\n\nSuccessfully installed program \'" + tokens[1] + "\'!\n\n");
                                    }
                                    else this.Interpreter_PushString("\n\nFailed to install program (IO error).\n\n");
                                }
                                else this.Interpreter_PushString("\n\nA file with that name is already installed.\n\n");
                            }
                            else this.Interpreter_PushString("\n\nFailed to install program (IO error).\n\n");
                        }
                        else this.Interpreter_PushString("\n\nLocal file does not exist.\n\n");
                    }
                    break;

                // set command
                case "set":
                    if (tokens.Length == 1)
                        this.Interpreter_PushString("\n\nNothing to set, see \'help set\'.\n\n");
                    else
                    {
                        switch (tokens[1])
                        {
                            // set forground color
                            case "fgcolor":
                            case "fgcolour":
                                if (tokens.Length == 2)
                                    this.Interpreter_PushString("\n\nset fgcolour requires more arguments, see \'help set\'.\n\n");
                                else
                                {
                                    try
                                    {
                                        this.fgcolour = this.GetColorFromString(tokens[2]);
                                        this.Interpreter_PushString("\n\nSet foreground colour to: " + tokens[2] + "\n\n");
                                    }
                                    catch
                                    {
                                        this.Interpreter_PushString("\n\nInvalid foreground colour setting: " + tokens[2] + "\n\n");
                                    }
                                }
                                break;

                            // set background color
                            case "bgcolor":
                            case "bgcolour":
                                if (tokens.Length == 2)
                                    this.Interpreter_PushString("\n\nset bgcolour requires more arguments, see \'help set\'.\n\n");
                                else
                                {
                                    try
                                    {
                                        this.bgcolour = this.GetColorFromString(tokens[2]);
                                        this.Interpreter_PushString("\n\nSet background colour to: " + tokens[2] + "\n\n");
                                    }
                                    catch
                                    {
                                        this.Interpreter_PushString("\n\nInvalid background colour setting: " + tokens[2] + "\n\n");
                                    }
                                }
                                break;

                            // set locale
                            case "locale":
                                if (tokens.Length == 2)
                                    this.Interpreter_PushString("\n\nset locale requires more arguments, see \'help set\'.\n\n");
                                else
                                {
                                    switch (tokens[2])
                                    {
                                        case "en_gb":
                                        case "EN_GB":
                                            this.Interpreter_PushString("\n\nSet locale to: " + tokens[2] + "\n\n");
                                            this.locale = LocaleSelection.EN_GB;
                                            break;
                                        case "en_us":
                                        case "EN_US":
                                            this.Interpreter_PushString("\n\nSet locale to: " + tokens[2] + "\n\n");
                                            this.locale = LocaleSelection.EN_US;
                                            break;
                                        default:
                                            this.Interpreter_PushString("\n\nInvalid locale setting: " + tokens[2] + "\n\n");
                                            break;
                                    }
                                }
                                break;

                            // unrecognized setting
                            default:
                                this.Interpreter_PushString("\n\nNo such setting: " + tokens[1] + "\n\n");
                                break;
                        }
                    }
                    break;

                // edit command
                case "edit":
                    if (tokens.Length == 1)
                        this.Interpreter_PushString("\n\nNo file specified in command.\n\n");
                    else
                    {
                        if (this.IsValidFilename(tokens[1]))
                        {
                            this.editor_file_name = tokens[1];
                            state_redirect = GameState.EDITOR_STATE;
                            this.Interpreter_PushString("\n");
                        }
                        else this.Interpreter_PushString("\n\nInvalid filename: " + tokens[1] + ", Valid characters: a-z A-Z 0-9 _\n\n");
                    }
                    break;

                // clear command
                case "clear":
                    state_redirect = GameState.INTERPRETER_STATE;
                    this.Interpreter_PushString("\n");
                    break;

                // exit command
                case "exit":
                    state_redirect = GameState.LEVEL_STATE;
                    this.Interpreter_PushString("\n");
                    break;

                // exec command
                case "exec":
                    if (tokens.Length == 1)
                        this.Interpreter_PushString("\n\nNo file specified in command.\n\n");
                    else
                    {
                        if (this.FileExists(this.current_level_shortname, tokens[1]))
                        {
                            this.Interpreter_PushString("\n");
                            this.ExecuteProgram(this.current_level_shortname, tokens[1], tokens.Skip(1).ToArray());
                            return;
                        }
                        else if (this.FileExists("global", tokens[1]))
                        {
                            this.Interpreter_PushString("\n");
                            this.ExecuteProgram("global", tokens[1], tokens.Skip(1).ToArray());
                            return;
                        }
                        else this.Interpreter_PushString("\n\nFile does not exist.\n\n");
                    }
                    break;

                // unrecognized command
                default:

                    // ./ command
                    if (tokens[0].Length > 2)
                    {
                        if (tokens[0].Substring(0, 2) == "./")
                        {
                            string exec_str = tokens[0].Substring(2);
                            if (this.FileExists(this.current_level_shortname, exec_str))
                            {
                                this.Interpreter_PushString("\n");
                                this.ExecuteProgram(this.current_level_shortname, exec_str, tokens.ToArray());
                                return;
                            }
                            else this.Interpreter_PushString("\n\nFile does not exist.\n\n");
                            break;
                        }
                    }

                    if (this.FileExists("global", tokens[0]))
                    {
                        this.Interpreter_PushString("\n");
                        this.ExecuteProgram("global", tokens[0], tokens.ToArray());
                        return;
                    }

                    this.Interpreter_PushString("\n\nUnknown command: " + tokens[0] + "\n\n");
                    break;
            }

            this.Interpreter_PushString("player@texploit:~/" + this.current_level_shortname + "$ ");
            if (state_redirect != null)
                this.InterpreterState_SetNextState((GameState)state_redirect);
        }

        private void Interpreter_TryAcceptCharacter(string c)
        {
            if (this.InRect(new Point(this.x + c.Length, this.y), (Rectangle)this.interpreter_bounds))
            {
                this.Write(c, false);
                this.interpreter_input_buffer += c;
                this.interpreter_buffer[this.interpreter_buffer.Count - 1] += c;
            }
        }

        private void Interpreter_DoBackSpace()
        {
            if (this.interpreter_input_buffer.Length > 0)
            {

                this.interpreter_buffer[this.y - this.interpreter_bounds.Value.Y] = this.interpreter_buffer[this.y - this.interpreter_bounds.Value.Y].Remove((this.x - this.interpreter_bounds.Value.X) - 1, 1);
                this.interpreter_input_buffer = this.interpreter_input_buffer.Remove(this.interpreter_input_buffer.Length - 1);
                int x = this.x; int y = this.y;
                this.Clear(' ', this.interpreter_bounds.Value.X, this.y, this.interpreter_bounds.Value.Right - 4, 1);
                this.x = this.interpreter_bounds.Value.X;
                this.Write(this.interpreter_buffer[this.y - this.interpreter_bounds.Value.Y], false);
                this.SetCursorPosition(x - 1, y);
            }
        }

        private void Interpreter_DoFullBackSpace()
        {
            this.interpreter_buffer[this.y - this.interpreter_bounds.Value.Y] = this.interpreter_buffer[this.y - this.interpreter_bounds.Value.Y].Remove((this.interpreter_buffer[this.y - this.interpreter_bounds.Value.Y].Length - this.interpreter_input_buffer.Length), this.interpreter_input_buffer.Length);
            this.interpreter_input_buffer = string.Empty;
            this.Clear(' ', this.interpreter_bounds.Value.X, this.y, this.interpreter_bounds.Value.Right - 4, 1);
            this.x = this.interpreter_bounds.Value.X;
            this.Write(this.interpreter_buffer[this.y - this.interpreter_bounds.Value.Y], false);
        }

        private void Interpreter_PushString(string s)
        {
            string[] lines = this.Interpreter_PreProcessString(s).Split('\n');
            foreach (string line in lines)
            {
                if (this.interpreter_buffer.Count > 26)
                    this.interpreter_buffer.RemoveAt(0);

                this.interpreter_buffer.Add(line);
                int x = this.interpreter_bounds.Value.X;
                int y = this.interpreter_bounds.Value.Y;
                
                foreach (string buffer_line in this.interpreter_buffer)
                {
                    this.Clear(' ', x, y, this.interpreter_bounds.Value.Right - 4, 1);
                    this.SetCursorPosition(x, y);
                    if (buffer_line != string.Empty)
                        this.Write2(this.interpreter_bounds.Value, buffer_line, false, false);

                    y++;
                }
            }
        }

        private string Interpreter_PreProcessString(string s)
        {
            string ret = string.Empty;
            char last = '\0';
            int n = 0;
            s = s.Replace("\r", "");
            foreach (char c in s)
            {
                if ((last != '\n' || last == '\0') && c == '\n')
                {
                    last = c;
                    n = 0;
                    continue;
                }
                else
                {
                    if (n >= this.interpreter_bounds.Value.Right - 4)
                    {
                        ret += "\n";
                        n = 0;
                    }
                    ret += c;
                    last = c;
                    n++;
                }
            }
            return ret;
        }

        #endregion
    }
}
