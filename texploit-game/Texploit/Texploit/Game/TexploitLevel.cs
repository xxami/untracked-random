
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Level selection menu states
    /// </summary>
    public enum LevelMenuState
    {
        VIEW_SYNOPSIS,
        QUERY_CASE,
        OPEN_INTERPRETER,
        BACK,
    }

    /// <summary>
    /// Main menu data struct
    /// </summary>
    public class LevelMenuData
    {
        public string text = string.Empty;
        public LevelMenuState state;

        public LevelMenuData(string text, LevelMenuState state)
        {
            this.text = text; this.state = state;
        }
    }

    /// <summary>
    /// Main game specific game state handling for the main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Fields

        private List<LevelMenuData> level_menu_data;
        private int level_menu_ptr;
        private Stopwatch level_menu_redraw_stopwatch;
        private int level_menu_fx_state;

        #endregion

        #region Private Methods

        private void LevelState_Initialize()
        {
            if (this.state != GameState.LEVEL_STATE) return;
            this.level_menu_data = new List<LevelMenuData>();
            this.level_menu_ptr = 0;
            this.level_menu_fx_state = 0;
            this.level_menu_redraw_stopwatch = new Stopwatch();
            this.level_menu_redraw_stopwatch.Start();
            this.DrawInitialLevelMenuScreen();
        }

        private void DrawInitialLevelMenuScreen()
        {
            this.DrawBorder(1, 1, COLUMNS_MAX - 2, ROWS_MAX - 1);
            this.DrawBorder(3, 2, COLUMNS_MAX - 6, ROWS_MAX - 3);
            this.SetCursorPosition(7, 5);
            this.Write(this.current_level_title);
            // todo: check if levels are locked/unlocked~ ~(^^~)
            this.AddLevelMenuItem("V I E W    M I S S I O N    D E T A I L S !", LevelMenuState.VIEW_SYNOPSIS);
            this.AddLevelMenuItem("G E T    I N F O    F R O M    C A S E !", LevelMenuState.QUERY_CASE);
            this.AddLevelMenuItem("O P E N    T E R M I N A L !", LevelMenuState.OPEN_INTERPRETER);
            this.AddLevelMenuItem("S E L E C T    D I F F E R E N T    L E V E L !", LevelMenuState.BACK);
            this.AddLevelMenuEffects();
            this.AddLevelMenuText();
        }

        private void LevelState_Update(KeyboardState key_state)
        {
            if (this.state != GameState.LEVEL_STATE) return;
            if (this.KeyPressed(key_state, Keys.Enter))
                this.LevelMenuSelect(this.level_menu_data[this.level_menu_ptr]);
            if (this.KeyPressed(key_state, Keys.Back))
                this.LevelState_SetNextState(GameState.LEVEL_SELECT_STATE);
            int last_level_menu_ptr = this.level_menu_ptr;
            if (this.KeyPressed(key_state, Keys.Up))
            {
                if (this.level_menu_ptr == 0)
                    this.level_menu_ptr = this.level_menu_data.Count - 1;
                else this.level_menu_ptr--;
            }
            if (this.KeyPressed(key_state, Keys.Down))
            {
                if (this.level_menu_ptr == this.level_menu_data.Count - 1)
                    this.level_menu_ptr = 0;
                else this.level_menu_ptr++;
            }
            if (this.level_menu_ptr != last_level_menu_ptr)
            {
                this.ClearLevelMenuText();
                this.AddLevelMenuText();
            }
        }

        private void LevelState_Draw()
        {
            if (this.state != GameState.LEVEL_STATE) return;
            if (this.level_menu_redraw_stopwatch.ElapsedMilliseconds >= 150)
            {
                this.AddLevelMenuEffects();
                this.level_menu_redraw_stopwatch.Restart();
            }
        }

        private void LevelState_SetNextState(GameState state)
        {
            this.state = state;
            this.LevelState_Destroy();
            this.InitializeUI();
        }

        private void LevelState_Destroy()
        {
            this.Clear(' ');
            this.level_menu_data = null;
            this.level_menu_redraw_stopwatch = null;
            this.level_menu_ptr = 0;
            this.level_menu_fx_state = 0;
        }

        #endregion

        #region Level Select Methods

        private void AddLevelMenuItem(string text, LevelMenuState state)
        {
            LevelMenuData data = new LevelMenuData(text, state);
            this.level_menu_data.Add(data);
        }

        private void AddLevelMenuEffects()
        {
            int x = 34;
            int y = 16;
            this.SetCursorPosition(x, y);
            this.Write("*");

            switch (this.level_menu_fx_state)
            {
                case 0:
                    this.SetCursorPosition(x - 1, y - 1);
                    this.Write(" ");
                    this.SetCursorPosition(x + 1, y + 1);
                    this.Write(" ");
                    this.SetCursorPosition(x - 1, y);
                    this.Write("*");
                    this.SetCursorPosition(x + 1, y);
                    this.Write("*");
                    break;
                case 1:
                    this.SetCursorPosition(x - 1, y);
                    this.Write(" ");
                    this.SetCursorPosition(x + 1, y);
                    this.Write(" ");
                    this.SetCursorPosition(x - 1, y + 1);
                    this.Write("*");
                    this.SetCursorPosition(x + 1, y - 1);
                    this.Write("*");
                    break;
                case 2:
                    this.SetCursorPosition(x - 1, y + 1);
                    this.Write(" ");
                    this.SetCursorPosition(x + 1, y - 1);
                    this.Write(" ");
                    this.SetCursorPosition(x, y - 1);
                    this.Write("*");
                    this.SetCursorPosition(x, y + 1);
                    this.Write("*");
                    break;
                case 3:
                    this.SetCursorPosition(x, y - 1);
                    this.Write(" ");
                    this.SetCursorPosition(x, y + 1);
                    this.Write(" ");
                    this.SetCursorPosition(x - 1, y - 1);
                    this.Write("*");
                    this.SetCursorPosition(x + 1, y + 1);
                    this.Write("*");
                    break;
                default:
                    break;
            }
            if (this.level_menu_fx_state >= 3) this.level_menu_fx_state = 0;
            else this.level_menu_fx_state++;
        }

        private void AddLevelMenuText()
        {
            if (this.level_menu_data.Count == 0) return;
            else if (this.level_menu_ptr == 0)
            {
                this.SetCursorPosition(38, 16);
                this.Write(this.level_menu_data[this.level_menu_ptr].text);
                if (this.level_menu_data.Count > 1)
                {
                    this.SetCursorPosition(31, 20);
                    this.Write(this.level_menu_data[this.level_menu_ptr + 1].text);
                }
            }
            else if (this.level_menu_ptr == (this.level_menu_data.Count - 1))
            {
                this.SetCursorPosition(38, 16);
                this.Write(this.level_menu_data[this.level_menu_ptr].text);
                this.SetCursorPosition(46, 12);
                this.Write(this.level_menu_data[this.level_menu_ptr - 1].text);
            }
            else
            {
                this.SetCursorPosition(38, 16);
                this.Write(this.level_menu_data[this.level_menu_ptr].text);
                this.SetCursorPosition(46, 12);
                this.Write(this.level_menu_data[this.level_menu_ptr - 1].text);
                this.SetCursorPosition(31, 20);
                this.Write(this.level_menu_data[this.level_menu_ptr + 1].text);
            }
        }

        private void ClearLevelMenuText()
        {
            this.Clear(' ', 31, 20, 50, 1);
            this.Clear(' ', 46, 12, 45, 1);
            this.Clear(' ', 38, 16, 50, 1);
        }

        private void LevelMenuSelect(LevelMenuData level_data)
        {
            switch (level_data.state)
            {
                case LevelMenuState.VIEW_SYNOPSIS:
                    this.LevelState_SetNextState(GameState.SYNOPSIS_STATE);
                    break;
                case LevelMenuState.QUERY_CASE:
                    this.LevelState_SetNextState(GameState.CASE_QUERY_STATE);
                    break;
                case LevelMenuState.OPEN_INTERPRETER:
                    this.LevelState_SetNextState(GameState.INTERPRETER_STATE);
                    break;
                case LevelMenuState.BACK:
                    this.DestroyLevel(this.current_level);
                    this.LevelState_SetNextState(GameState.LEVEL_SELECT_STATE);
                    break;
                default:
                    break;
            }
        }

        #endregion
    }
}
