
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Editor state handling for the main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Fields

        private Stopwatch editor_backspace_stopwatch;
        private int editor_backspace_stopwatch_time;
        private Stopwatch editor_left_stopwatch;
        private int editor_left_stopwatch_time;
        private Stopwatch editor_right_stopwatch;
        private int editor_right_stopwatch_time;
        private Stopwatch editor_up_stopwatch;
        private int editor_up_stopwatch_time;
        private Stopwatch editor_down_stopwatch;
        private int editor_down_stopwatch_time;

        private Rectangle? editor_bounds;

        private List<string> editor_buffer_up;
        private List<string> editor_buffer;
        private List<string> editor_buffer_down;

        #endregion

        #region Private Methods

        private void EditorState_Initialize()
        {
            if (this.state != GameState.EDITOR_STATE) return;
            this.DrawInitialEditorScreen();
        }

        private void DrawInitialEditorScreen()
        {
            this.editor_bounds = new Rectangle(5, 4, COLUMNS_MAX - 11, ROWS_MAX - 8);
            this.editor_buffer_up = new List<string>();
            this.editor_buffer = new List<string>();
            this.editor_buffer_down = new List<string>();
            this.editor_backspace_stopwatch = new Stopwatch();
            this.editor_backspace_stopwatch_time = 300;
            this.editor_backspace_stopwatch.Start();
            this.editor_up_stopwatch = new Stopwatch();
            this.editor_up_stopwatch_time = 300;
            this.editor_up_stopwatch.Start();
            this.editor_down_stopwatch = new Stopwatch();
            this.editor_down_stopwatch_time = 300;
            this.editor_down_stopwatch.Start();
            this.editor_left_stopwatch = new Stopwatch();
            this.editor_left_stopwatch_time = 300;
            this.editor_left_stopwatch.Start();
            this.editor_right_stopwatch = new Stopwatch();
            this.editor_right_stopwatch_time = 300;
            this.editor_right_stopwatch.Start();
            this.DrawBorder(1, 1, COLUMNS_MAX - 2, ROWS_MAX - 1);
            this.DrawBorder(3, 2, COLUMNS_MAX - 6, ROWS_MAX - 3);
            this.SetCursorPosition(this.editor_bounds.Value.X - 2, 1);
            this.Write("TexEdit 1.0");
            this.SetCursorPosition(this.editor_bounds.Value.X - 2, this.editor_bounds.Value.Bottom + 2);
            this.Write("CTRL+S = Save+Exit", false);
            this.SetCursorPosition(this.editor_bounds.Value.Right - 10, this.editor_bounds.Value.Bottom + 2);
            this.Write("CTRL+X = Exit", false);
            this.SetCursorPosition(this.editor_bounds.Value.X, this.editor_bounds.Value.Y);
            List<string> contents = this.GetFile(this.current_level_shortname, this.editor_file_name);
            if (contents.Count <= 0) this.Editor_PushString("");
            else foreach (string line in contents) this.Editor_PushString(this.ReplaceInvalidCharacters(line));
            this.should_draw_cursor = true;
        }

        private void EditorState_Update(KeyboardState key_state)
        {
            if (this.state != GameState.EDITOR_STATE) return;

            if (this.KeyPressed(key_state, Keys.Up))
            {
                this.Editor_MoveCursorUp();
                this.editor_up_stopwatch_time = 300;
                this.editor_up_stopwatch.Restart();
            }
            else if (key_state.IsKeyDown(Keys.Up))
            {
                if (this.editor_up_stopwatch.ElapsedMilliseconds > this.editor_up_stopwatch_time)
                {
                    this.Editor_MoveCursorUp();
                    this.editor_up_stopwatch_time = 100;
                    this.editor_up_stopwatch.Restart();
                }
            }
            else if (this.KeyPressed(key_state, Keys.Down))
            {
                this.Editor_MoveCursorDown();
                this.editor_down_stopwatch_time = 300;
                this.editor_down_stopwatch.Restart();
            }
            else if (key_state.IsKeyDown(Keys.Down))
            {
                if (this.editor_down_stopwatch.ElapsedMilliseconds > this.editor_down_stopwatch_time)
                {
                    this.Editor_MoveCursorDown();
                    this.editor_down_stopwatch_time = 100;
                    this.editor_down_stopwatch.Restart();
                }
            }
            else if (this.KeyPressed(key_state, Keys.Left))
            {
                this.Editor_MoveCursorLeft();
                this.editor_left_stopwatch_time = 300;
                this.editor_left_stopwatch.Restart();
            }
            else if (key_state.IsKeyDown(Keys.Left))
            {
                if (this.editor_left_stopwatch.ElapsedMilliseconds > this.editor_left_stopwatch_time)
                {
                    this.Editor_MoveCursorLeft();
                    this.editor_left_stopwatch_time = 100;
                    this.editor_left_stopwatch.Restart();
                }
            }
            else if (this.KeyPressed(key_state, Keys.Right))
            {
                this.Editor_MoveCursorRight();
                this.editor_right_stopwatch_time = 300;
                this.editor_right_stopwatch.Restart();
            }
            else if (key_state.IsKeyDown(Keys.Right))
            {
                if (this.editor_right_stopwatch.ElapsedMilliseconds > this.editor_right_stopwatch_time)
                {
                    this.Editor_MoveCursorRight();
                    this.editor_right_stopwatch_time = 100;
                    this.editor_right_stopwatch.Restart();
                }
            }
            else if (this.KeyPressed(key_state, Keys.Enter))
            {
                this.Editor_DoNewLine();
            }
            else if (this.KeyPressed(key_state, Keys.Back))
            {
                this.Editor_DoBackSpace();
                this.editor_backspace_stopwatch_time = 300;
                this.editor_backspace_stopwatch.Restart();
            }
            else if (key_state.IsKeyDown(Keys.Back))
            {
                if (this.editor_backspace_stopwatch.ElapsedMilliseconds > this.editor_backspace_stopwatch_time)
                {
                    this.Editor_DoBackSpace();
                    this.editor_backspace_stopwatch_time = 100;
                    this.editor_backspace_stopwatch.Restart();
                }
            }
            else if ((key_state.IsKeyDown(Keys.LeftControl) || key_state.IsKeyDown(Keys.RightControl)) && this.KeyPressed(key_state, Keys.X))
            {
                this.EditorState_SetNextState(GameState.INTERPRETER_STATE);
                return;
            }
            else if ((key_state.IsKeyDown(Keys.LeftControl) || key_state.IsKeyDown(Keys.RightControl)) && this.KeyPressed(key_state, Keys.S))
            {
                List<string> contents = new List<string>();
                contents.AddRange(this.editor_buffer_up);
                contents.AddRange(this.editor_buffer);
                contents.AddRange(this.editor_buffer_down);
                if (this.CreateFile(this.current_level_shortname, this.editor_file_name, contents))
                {
                    this.EditorState_SetNextState(GameState.INTERPRETER_STATE);
                    this.Interpreter_TryAcceptCharacter("edit " + this.editor_file_name);
                    this.interpreter_input_buffer = "";
                    this.Interpreter_PushString("\n\nSuccessfully wrote " + contents.Count + " lines to \'" + this.editor_file_name + "\'!\n\n");
                    this.Interpreter_PushString("player@texploit:~/" + this.current_level_shortname + "$ ");
                }
                else
                {
                    this.EditorState_SetNextState(GameState.INTERPRETER_STATE);
                    this.Interpreter_TryAcceptCharacter("edit " + this.editor_file_name);
                    this.interpreter_input_buffer = "";
                    this.Interpreter_PushString("\n\nIO error occured.\n\n");
                    this.Interpreter_PushString("player@texploit:~/" + this.current_level_shortname + "$ ");
                }
                contents = null;
            }
            else
            {
                char text_poll = this.GetChar(key_state);
                if (text_poll != '\0') this.Editor_TryAcceptCharacter(text_poll.ToString().Replace("\t", "    "));
            }
        }

        private void EditorState_Draw()
        {
            if (this.state != GameState.EDITOR_STATE) return;
        }

        private void EditorState_SetNextState(GameState state)
        {
            this.state = state;
            this.EditorState_Destroy();
            this.InitializeUI();
        }

        private void EditorState_Destroy()
        {
            this.editor_bounds = null;
            this.editor_buffer_up = null;
            this.editor_buffer = null;
            this.editor_buffer_down = null;
            this.editor_backspace_stopwatch = null;
            this.editor_backspace_stopwatch_time = 300;
            this.editor_up_stopwatch = null;
            this.editor_up_stopwatch_time = 300;
            this.editor_down_stopwatch = null;
            this.editor_down_stopwatch_time = 300;
            this.editor_left_stopwatch = null;
            this.editor_left_stopwatch_time = 300;
            this.editor_right_stopwatch = null;
            this.editor_right_stopwatch_time = 300;
            this.should_draw_cursor = false;
            this.Clear(' ');
        }

        #endregion

        #region Editor Methods

        private void Editor_TryAcceptCharacter(string c)
        {
            if (this.InRect(new Point(this.x + c.Length, this.y), (Rectangle)this.editor_bounds))
            {
                int old_x = this.x; int old_y = this.y;
                int x = this.x - this.editor_bounds.Value.X; int y = this.y - this.editor_bounds.Value.Y;

                this.editor_buffer[y] = this.editor_buffer[y].Insert(x, c);

                if (this.editor_buffer[y].Length >= this.editor_bounds.Value.Right - 4)
                    this.editor_buffer[y] = this.editor_buffer[y].Remove(this.editor_bounds.Value.Right - 4,
                        this.editor_buffer[y].Length - (this.editor_bounds.Value.Right - 4));

                this.Clear(' ', this.editor_bounds.Value.X, this.y, this.editor_bounds.Value.Right - 4, 1);
                this.SetCursorPosition(this.editor_bounds.Value.X, this.y);
                this.Write(this.editor_buffer[y], false);
                this.SetCursorPosition(old_x+c.Length, old_y);
            }
        }

        private void Editor_DoBackSpace()
        {
            if ((this.x - this.editor_bounds.Value.X) > 0)
            {
                this.editor_buffer[this.y - this.editor_bounds.Value.Y] = this.editor_buffer[this.y - this.editor_bounds.Value.Y].Remove((this.x - this.editor_bounds.Value.X) - 1, 1);
                int x = this.x; int y = this.y;
                this.Editor_RedrawBuffer();
                this.SetCursorPosition(x - 1, y);
            }
            else
            {
                if (this.editor_buffer.Count > 26)
                {
                    if (this.y - this.editor_bounds.Value.Y > 0)
                    {
                        string append = this.editor_buffer[this.y - this.editor_bounds.Value.Y];
                        this.editor_buffer.RemoveAt(this.y - this.editor_bounds.Value.Y);
                        if (this.editor_buffer_down.Count > 0)
                        {
                            this.editor_buffer.Add(this.editor_buffer_down[0]);
                            this.editor_buffer_down.RemoveAt(0);
                        }
                        int x = this.editor_bounds.Value.X + this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1].Length; int y = this.y;
                        this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1] += append;
                        if (this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1].Length > (this.editor_bounds.Value.Right - 5))
                            this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1] = this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1].Remove(this.editor_bounds.Value.Right - 5);
                        this.Clear(' ', this.editor_bounds.Value.X, this.editor_bounds.Value.Y, this.editor_bounds.Value.Right - 4, this.editor_bounds.Value.Bottom - 4);
                        this.Editor_RedrawBuffer();
                        this.SetCursorPosition(x, y - 1);
                    }
                    else if (this.editor_buffer_up.Count > 0)
                    {
                        string append_text = this.editor_buffer[0];
                        this.editor_buffer[0] = this.editor_buffer_up[this.editor_buffer_up.Count - 1] + append_text;
                        int x = this.editor_bounds.Value.X + this.editor_buffer_up[this.editor_buffer_up.Count - 1].Length; int y = this.y;
                        this.editor_buffer_up.RemoveAt(this.editor_buffer_up.Count - 1);
                        if (this.editor_buffer[0].Length > (this.editor_bounds.Value.Right - 5))
                            this.editor_buffer[0] = this.editor_buffer[0].Remove(this.editor_bounds.Value.Right - 5);
                        this.Clear(' ', this.editor_bounds.Value.X, this.editor_bounds.Value.Y, this.editor_bounds.Value.Right - 4, this.editor_bounds.Value.Bottom - 4);
                        this.Editor_RedrawBuffer();
                        this.SetCursorPosition(x, y);
                    }
                }
                else
                {
                    if (this.y - this.editor_bounds.Value.Y > 0)
                    {
                        string append = this.editor_buffer[this.y - this.editor_bounds.Value.Y];
                        this.editor_buffer.RemoveAt(this.y - this.editor_bounds.Value.Y);
                        int x = this.editor_bounds.Value.X + this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1].Length; int y = this.y;
                        this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1] += append;
                        if (this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1].Length > (this.editor_bounds.Value.Right - 5))
                            this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1] = this.editor_buffer[(this.y - this.editor_bounds.Value.Y) - 1].Remove(this.editor_bounds.Value.Right - 5);
                        this.Clear(' ', this.editor_bounds.Value.X, this.editor_bounds.Value.Y, this.editor_bounds.Value.Right - 4, this.editor_bounds.Value.Bottom - 4);
                        this.Editor_RedrawBuffer();
                        this.SetCursorPosition(x, y - 1);
                    }
                    else if (this.editor_buffer_up.Count > 0)
                    {
                        string append_text = this.editor_buffer[0];
                        this.editor_buffer[0] = this.editor_buffer_up[this.editor_buffer_up.Count - 1] + append_text;
                        int x = this.editor_bounds.Value.X + this.editor_buffer_up[this.editor_buffer_up.Count - 1].Length; int y = this.y;
                        this.editor_buffer_up.RemoveAt(this.editor_buffer_up.Count - 1);
                        if (this.editor_buffer[0].Length > (this.editor_bounds.Value.Right - 5))
                            this.editor_buffer[0] = this.editor_buffer[0].Remove(this.editor_bounds.Value.Right - 5);
                        this.Clear(' ', this.editor_bounds.Value.X, this.editor_bounds.Value.Y, this.editor_bounds.Value.Right - 4, this.editor_bounds.Value.Bottom - 4);
                        this.Editor_RedrawBuffer();
                        this.SetCursorPosition(x, y);
                    }
                }
            }
        }

        private void Editor_DoNewLine()
        {
            if ((this.y - this.editor_bounds.Value.Y) == this.editor_buffer.Count - 1)
            {
                if ((this.x - this.editor_bounds.Value.X) < this.editor_buffer[this.y - this.editor_bounds.Value.Y].Length)
                {
                    string append_buffer = this.editor_buffer[this.y - this.editor_bounds.Value.Y].Substring(this.x - this.editor_bounds.Value.X);
                    this.editor_buffer[this.y - this.editor_bounds.Value.Y] = this.editor_buffer[this.y - this.editor_bounds.Value.Y].Remove(this.x - this.editor_bounds.Value.X);
                    this.Editor_PushString(append_buffer);
                    this.x = this.editor_bounds.Value.X;
                }
                else
                {
                    this.Editor_PushString("\n");
                    this.x = this.editor_bounds.Value.X;
                }
            }
            else
            {
                if ((this.x - this.editor_bounds.Value.X) < this.editor_buffer[this.y - this.editor_bounds.Value.Y].Length)
                {
                    string append_buffer = this.editor_buffer[this.y - this.editor_bounds.Value.Y].Substring(this.x - this.editor_bounds.Value.X);
                    this.editor_buffer[this.y - this.editor_bounds.Value.Y] = this.editor_buffer[this.y - this.editor_bounds.Value.Y].Remove(this.x - this.editor_bounds.Value.X);
                    this.Editor_InsertString(append_buffer);
                }
                else this.Editor_InsertString("");
            }
        }

        private void Editor_RedrawBuffer()
        {
            int x = this.editor_bounds.Value.X;
            int y = this.editor_bounds.Value.Y;

            foreach (string buffer_line in this.editor_buffer)
            {
                this.Clear(' ', x, y, this.editor_bounds.Value.Right - 4, 1);
                this.SetCursorPosition(x, y);
                if (buffer_line != string.Empty)
                    this.Write(buffer_line, false);
                y++;
            }
        }

        private void Editor_InsertString(string s)
        {
            if (this.editor_buffer.Count > 26)
            {
                if (this.editor_buffer_down.Count > 0)
                    this.editor_buffer_down.Insert(0, this.editor_buffer[this.editor_buffer.Count - 1]);
                else this.editor_buffer_down.Add(this.editor_buffer[this.editor_buffer.Count - 1]);
                this.editor_buffer.RemoveAt(this.editor_buffer.Count - 1);
            } 
            this.editor_buffer.Insert((this.y - this.editor_bounds.Value.Y)+1, s);

            int x = this.editor_bounds.Value.X; int y = this.y + 1;
            this.Editor_RedrawBuffer();
            this.SetCursorPosition(x, y);
        }

        private void Editor_PushString(string s)
        {
            string[] lines = this.Editor_PreProcessString(s).Split('\n');
            foreach (string line in lines)
            {
                if (this.editor_buffer.Count > 26)
                {
                    this.editor_buffer_up.Add(this.editor_buffer[0]);
                    this.editor_buffer.RemoveAt(0);
                }

                this.editor_buffer.Add(line);
                int x = this.editor_bounds.Value.X;
                int y = this.editor_bounds.Value.Y;

                foreach (string buffer_line in this.editor_buffer)
                {
                    this.Clear(' ', x, y, this.editor_bounds.Value.Right - 4, 1);
                    this.SetCursorPosition(x, y);
                    if (buffer_line != string.Empty)
                        this.Write2(this.editor_bounds.Value, buffer_line, false, false);

                    y++;
                }
            }
        }

        private string Editor_PreProcessString(string s)
        {
            string ret = string.Empty;
            char last = '\0';
            int n = 0;
            s = s.Replace("\r", "");
            foreach (char c in s)
            {
                if ((last != '\n' || last == '\0') && c == '\n')
                {
                    last = c;
                    n = 0;
                    continue;
                }
                else
                {
                    if (n >= this.editor_bounds.Value.Right - 4)
                    {
                        ret += "\n";
                        n = 0;
                    }
                    ret += c;
                    last = c;
                    n++;
                }
            }
            return ret;
        }

        private void Editor_MoveCursorUp()
        {
            if (this.y > this.editor_bounds.Value.Top)
            {
                this.y--;
                this.Editor_RealignCursorX();
            }
            else if (this.editor_buffer_up.Count > 0)
            {
                if (this.editor_buffer.Count <= 26)
                {
                    this.editor_buffer.Insert(0, this.editor_buffer_up[this.editor_buffer_up.Count - 1]);
                    this.editor_buffer_up.RemoveAt(this.editor_buffer_up.Count - 1);
                }
                else
                {
                    if (this.editor_buffer_down.Count > 0)
                        this.editor_buffer_down.Insert(0, this.editor_buffer[this.editor_buffer.Count - 1]);
                    else this.editor_buffer_down.Add(this.editor_buffer[this.editor_buffer.Count - 1]);
                    this.editor_buffer.RemoveAt(this.editor_buffer.Count - 1);
                    this.editor_buffer.Insert(0, this.editor_buffer_up[this.editor_buffer_up.Count - 1]);
                    this.editor_buffer_up.RemoveAt(this.editor_buffer_up.Count - 1);
                }

                int x = this.x; int y = this.y;
                this.Editor_RedrawBuffer();
                this.SetCursorPosition(x, y);
                this.Editor_RealignCursorX();
            }
        }

        private void Editor_MoveCursorDown()
        {
            if (this.y < (this.editor_bounds.Value.Top + 26))
            {
                if (((this.y + 1) - this.editor_bounds.Value.Y) < this.editor_buffer.Count)
                {
                    this.y++;
                    this.Editor_RealignCursorX();
                }
            }
            else if (this.editor_buffer_down.Count > 0)
            {
                this.editor_buffer_up.Add(this.editor_buffer[0]);
                this.editor_buffer.RemoveAt(0);
                this.editor_buffer.Add(this.editor_buffer_down[0]);
                this.editor_buffer_down.RemoveAt(0);

                int x = this.x; int y = this.y;
                this.Editor_RedrawBuffer();
                this.SetCursorPosition(x, y);
                this.Editor_RealignCursorX();
            }
        }

        private void Editor_MoveCursorLeft()
        {
            if (this.x > this.editor_bounds.Value.X)
            {
                this.x--;
            }
        }

        private void Editor_MoveCursorRight()
        {
            if (this.x <= this.editor_bounds.Value.Right - 1)
            {
                if (((this.x + 1) - this.editor_bounds.Value.X) <= this.editor_buffer[this.y - this.editor_bounds.Value.Y].Length)
                    this.x++;
            }
        }

        private void Editor_RealignCursorX()
        {
            if ((this.x - this.editor_bounds.Value.X) > this.editor_buffer[this.y - this.editor_bounds.Value.Y].Length)
            {
                this.x = this.editor_bounds.Value.X + this.editor_buffer[this.y - this.editor_bounds.Value.Y].Length;
            }
        }

        #endregion
    }
}
