
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System.Collections.Generic;
using System.IO;

namespace Texploit
{
    /// <summary>
    /// File system utils
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Private Members

        private bool CreateDirectory(string dirname)
        {
            try
            {
                if (!Directory.Exists(".\\level_data\\" + dirname))
                {
                    Directory.CreateDirectory(".\\level_data\\" + dirname);
                    return true;
                }
            }
            catch
            {
                return false;
            }
            return false;
        }

        private bool DirectoryExists(string dirname)
        {
            if (Directory.Exists(".\\level_data\\" + dirname))
                return true;
            return false;
        }

        private bool FileExists(string dirname, string fname)
        {
            if (File.Exists(".\\level_data\\" + dirname + "\\" + fname))
                return true;
            else return false;
        }

        private bool CopyFile(string dirname1, string fname1, string dirname2, string fname2)
        {
            try
            {
                File.Copy(".\\level_data\\" + dirname1 + "\\" + fname1, ".\\level_data\\" + dirname2 + "\\" + fname2, false);
                return true;
            }
            catch
            {
                return false;
            }
        }

        private List<string> GetFile(string dirname, string fname)
        {
            if (File.Exists(".\\level_data\\" + dirname + "\\" + fname))
            {
                try
                {
                    List<string> lines = new List<string>(File.ReadAllLines(".\\level_data\\" + dirname + "\\" + fname));
                    return lines;
                }
                catch
                {
                    return new List<string>();
                }
            }
            else return new List<string>();
        }

        private List<string> GetFiles(string dirname)
        {
            try
            {
                Directory.SetCurrentDirectory(".\\level_data\\" + dirname);
                List<string> ret = new List<string>(Directory.GetFiles("."));
                Directory.SetCurrentDirectory("..\\..");
                return ret;
            }
            catch
            {
                List<string> ret = new List<string>();
                ret.Add("IO error when reading directory structure.");
                return ret;
            }
        }

        private bool CreateFile(string dirname, string fname, List<string> contents)
        {
            try
            {
                File.WriteAllLines(".\\level_data\\" + dirname + "\\" + fname, contents);
                return true;
            }
            catch
            {
                return false;
            }
        }

        private bool RemoveFile(string dirname, string fname)
        {
            try
            {
                File.Delete(".\\level_data\\" + dirname + "\\" + fname);
                return true;
            }
            catch
            {
                return false;
            }
        }

        private bool IsValidFilename(string fname)
        {
            foreach (char c in fname)
            {
                int test = c;
                if ((c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122) || c == 95 || c == 46)
                    continue;
                else return false;
            }
            return true;
        }
        
        #endregion
    }
}
