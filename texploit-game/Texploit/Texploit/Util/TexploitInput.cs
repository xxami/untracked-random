
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

#define EN_GB

using Microsoft.Xna.Framework.Input;

namespace Texploit
{
    /// <summary>
    /// Input helper functions
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Private Methods

        private bool KeyPressed(KeyboardState state, Keys key)
        {
            if (state.IsKeyDown(key) && !this.key_state_prev.IsKeyDown(key))
                return true;
            return false;
        }

        private char GetChar(KeyboardState state)
        {
            foreach (Keys key in state.GetPressedKeys())
            {
                if (!this.key_state_prev.IsKeyDown(key))
                {
                    bool shift = (state.IsKeyDown(Keys.LeftShift) || state.IsKeyDown(Keys.RightShift));
                    int vkey = (int)key;
                    if (!shift && vkey >= 48 && vkey <= 57)
                        return (char)vkey;
                    else if (vkey >= 65 && vkey <= 90)
                    {
                        if (shift)
                            return (char)vkey;
                        else return (char)(vkey + 32);
                    }
                    #if EN_GB
                    switch (key)
                    {
                        case Keys.D0: return ')';
                        case Keys.D1: return '!';
                        case Keys.D2: return '"';
                        case Keys.D3: return '£';
                        case Keys.D4: return '$';
                        case Keys.D5: return '%';
                        case Keys.D6: return '^';
                        case Keys.D7: return '&';
                        case Keys.D8: return '*';
                        case Keys.D9: return '(';
                        case Keys.Add: return '+';
                        case Keys.Divide: return '/';
                        case Keys.Multiply: return '*';
                        case Keys.Subtract: return '-';
                        case Keys.Space: return ' ';
                        case Keys.Tab: return '\t';
                        case Keys.Decimal: return '.';
                        case Keys.NumPad0: return '0';
                        case Keys.NumPad1: return '1';
                        case Keys.NumPad2: return '2';
                        case Keys.NumPad3: return '3';
                        case Keys.NumPad4: return '4';
                        case Keys.NumPad5: return '5';
                        case Keys.NumPad6: return '6';
                        case Keys.NumPad7: return '7';
                        case Keys.NumPad8: return '8';
                        case Keys.NumPad9: return '9';
                        case Keys.OemBackslash: return shift ? '|' : '\\';
                        case Keys.OemCloseBrackets: return shift ? '}' : ']';
                        case Keys.OemComma: return shift ? '<' : ',';
                        case Keys.OemMinus: return shift ? '_' : '-';
                        case Keys.OemOpenBrackets: return shift ? '{' : '[';
                        case Keys.OemPeriod: return shift ? '>' : '.';
                        case Keys.OemPipe: return shift ? '|' : '\\';
                        case Keys.OemPlus: return shift ? '+' : '=';
                        case Keys.OemQuestion: return shift ? '?' : '/';
                        case Keys.OemQuotes: return shift ? '~' : '#';
                        case Keys.OemSemicolon: return shift ? ':' : ';';
                        case Keys.OemTilde: return shift ? '@' : '\'';
                        default: break;
                    }
                    #else
                    switch (key)
                    {
                        case Keys.D0: return ')';
                        case Keys.D1: return '!';
                        case Keys.D2: return '@';
                        case Keys.D3: return '#';
                        case Keys.D4: return '$';
                        case Keys.D5: return '%';
                        case Keys.D6: return '^';
                        case Keys.D7: return '&';
                        case Keys.D8: return '*';
                        case Keys.D9: return '(';
                        case Keys.Add: return '+';
                        case Keys.Divide: return '/';
                        case Keys.Multiply: return '*';
                        case Keys.Subtract: return '-';
                        case Keys.Space: return ' ';
                        case Keys.Tab: return '\t';
                        case Keys.Decimal: return '.';
                        case Keys.NumPad0: return '0';
                        case Keys.NumPad1: return '1';
                        case Keys.NumPad2: return '2';
                        case Keys.NumPad3: return '3';
                        case Keys.NumPad4: return '4';
                        case Keys.NumPad5: return '5';
                        case Keys.NumPad6: return '6'; break;
                        case Keys.NumPad7: return '7';
                        case Keys.NumPad8: return '8';
                        case Keys.NumPad9: return '9';
                        case Keys.OemBackslash: return shift ? '|' : '\\';
                        case Keys.OemCloseBrackets: return shift ? '}' : ']';
                        case Keys.OemComma: return shift ? '<' : ',';
                        case Keys.OemMinus: return shift ? '_' : '-';
                        case Keys.OemOpenBrackets: return shift ? '{' : '[';
                        case Keys.OemPeriod: return shift ? '>' : '.';
                        case Keys.OemPipe: return shift ? '|' : '\\';
                        case Keys.OemPlus: return shift ? '+' : '=';
                        case Keys.OemQuestion: return shift ? '?' : '/';
                        case Keys.OemQuotes: return shift ? '"' : '\'';
                        case Keys.OemSemicolon: return shift ? ':' : ';';
                        case Keys.OemTilde: return shift ? '~' : '\'';
                        default: break;
                    }
                    #endif
                }
            }
            return '\0';
        }

        #endregion
    }
}
