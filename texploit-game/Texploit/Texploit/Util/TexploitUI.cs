
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using Microsoft.Xna.Framework;

namespace Texploit
{
    /// <summary>
    /// UI utility functions for the main game class
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {

        #region Fields
        
        private int x = 0;
        private int y = 0;

        #endregion

        #region Private Methods

        private void SetCursorPosition(int x, int y)
        {
            if (x >= 0 && x <= COLUMNS_MAX && y >= 0 && y <= ROWS_MAX) 
            {
                this.x = x;
                this.y = y;
            }
        }

        private void SetCursorPosition(Point xy)
        {
            if (xy.X >= 0 && xy.X <= COLUMNS_MAX && xy.Y >= 0 && xy.Y <= ROWS_MAX)
            {
                this.x = xy.X;
                this.y = xy.Y;
            }
        }

        private int Write(string text, bool wrap = true, bool shift_cursor = true)
        {
            int cur_x = this.x;
            int cur_y = this.y;
            for (int i = 0; i < text.Length; i++)
            {
                if (cur_x >= COLUMNS_MAX)
                {
                    if (cur_y + 1 >= ROWS_MAX) return text.Length - i;
                    else
                    {
                        if (!wrap) return text.Length - i;
                        else
                        {
                            cur_x = 0;
                            cur_y++;
                        }
                    }
                }
                else if (cur_y >= ROWS_MAX)
                    return text.Length - i;
                this.ascii_ui[cur_y, cur_x] = text[i];
                cur_x++;
            }
            if (shift_cursor)
            {
                this.x = cur_x;
                this.y = cur_y;
            }
            return 0;
        }

        private int Write2(int x, int y, int w, int h, string text, bool align = true, bool wrap = true, bool shift_cursor = true)
        {
            int cur_x = (align) ? x + this.x : this.x;
            int cur_y = (align) ? y + this.y : this.y;
            for (int i = 0; i < text.Length; i++)
            {
                if (cur_x >= x+w || text[i] == '\n')
                {
                    if (cur_y + 1 >= y+h) return text.Length - i;
                    else
                    {
                        if (!wrap) return text.Length - i;
                        else
                        {
                            cur_x = x;
                            cur_y++;
                        }
                    }
                }
                else if (cur_y >= y+h)
                    return text.Length - i;
                if (text[i] == '\n') continue;
                else if (cur_x == x && text[i] == ' ' && wrap) continue;
                this.ascii_ui[cur_y, cur_x] = text[i];
                cur_x++;
            }
            if (shift_cursor)
            {
                this.x = cur_x;
                this.y = cur_y;
            }
            return 0;
        }

        private int Write2(Rectangle rect, string text, bool align = true, bool wrap = true, bool shift_cursor = true)
        {
            int cur_x = (align) ? rect.X + this.x : this.x;
            int cur_y = (align) ? rect.Y + this.y : this.y;
            for (int i = 0; i < text.Length; i++)
            {
                if (cur_x >= rect.X + rect.Width || text[i] == '\n')
                {
                    if (cur_y + 1 >= rect.Y + rect.Height) return text.Length - i;
                    else
                    {
                        if (!wrap) return text.Length - i;
                        else
                        {
                            cur_x = rect.X;
                            cur_y++;
                        }
                    }
                }
                else if (cur_y >= rect.Y + rect.Height)
                    return text.Length - i;
                if (text[i] == '\n') continue;
                else if (cur_x == rect.X && text[i] == ' ' && wrap) continue;
                this.ascii_ui[cur_y, cur_x] = text[i];
                cur_x++;
            }
            if (shift_cursor)
            {
                this.x = cur_x;
                this.y = cur_y;
            }
            return 0;
        }

        private void Clear(char clr_char)
        {
            for (int cur_y = 0; cur_y < this.ascii_ui.GetLength(0); cur_y++)
                for (int cur_x = 0; cur_x < this.ascii_ui.GetLength(1); cur_x++)
                    this.ascii_ui[cur_y, cur_x] = clr_char;
        }

        private void Clear(char clr_char, int x, int y, int w, int h)
        {
            if (x < 0 || y < 0 || x + w >= this.ascii_ui.GetLength(1) || y + h >= this.ascii_ui.GetLength(0))
                return;
            else
            {
                for (int cur_y = y; cur_y < y + h; cur_y++)
                    for (int cur_x = x; cur_x < x + w; cur_x++)
                        this.ascii_ui[cur_y, cur_x] = clr_char;
                return;
            }
        }

        private void DrawBorder(int x, int y, int w, int h)
        {
            this.SetCursorPosition(x, y);
            this.Write(BOX_THICK_TL.ToString());
            if (w >= 2) this.Write(new string(BOX_THICK_X, w - 2));
            this.Write(BOX_THICK_TR.ToString());
            for (int cur_y = y + 1; cur_y <= (y + h) - 2; cur_y++)
            {
                this.SetCursorPosition(x, cur_y);
                this.Write(BOX_THICK_Y.ToString());
                this.SetCursorPosition(x + w - 1, cur_y);
                this.Write(BOX_THICK_Y.ToString());
            }
            this.SetCursorPosition(x, (y+h >= 2) ? y+h -2 : y+h);
            this.Write(BOX_THICK_BL.ToString());
            if (w >= 2) this.Write(new string(BOX_THICK_X, w - 2));
            this.Write(BOX_THICK_BR.ToString());
        }

        private void DrawHorizontalLine(int x, int y, int w)
        {
            this.SetCursorPosition(x, y);
            this.Write(new string(BOX_THIN_X, w));
        }

        #endregion
    }
}
