
#region Description
/**
 * Title: Texploit
 * Description: Entry for the Moosader Gamedev Compo #7: "Text-based game"
 */
#endregion

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Threading;

namespace Texploit
{
    /// <summary>
    /// Compile and execute C# code
    /// </summary>
    public partial class TexploitGame : Microsoft.Xna.Framework.Game
    {
        #region Private Methods

        private Thread remote_app_thread = null;
        private AppDomain remote_app_domain = null;

        private List<string> CompileProgram(string dirname, string fname)
        {
            try
            {
                string cs_name = ".\\level_data\\" + dirname + "\\" + fname;
                CodeDomProvider compiler = CodeDomProvider.CreateProvider("C#");
                CompilerParameters compile_params = new CompilerParameters();
                compile_params.ReferencedAssemblies.Add("TexploitAPI.dll");
                compile_params.GenerateInMemory = false;
                compile_params.TreatWarningsAsErrors = true;
                compile_params.GenerateExecutable = false;
                compile_params.OutputAssembly = ".\\level_data\\" + dirname + "\\" + fname.Replace(".cs", ".exe");
                CompilerResults compile_results = compiler.CompileAssemblyFromFile(compile_params, cs_name);

                List<string> output = new List<string>();
                if (compile_results.Errors.Count <= 0)
                    output.Add("Successfully compiled \'" + fname + "\'!");
                else
                {
                    output.Add("Errors compiling \'" + fname + "\':");
                    output.Add("");
                    foreach (CompilerError err in compile_results.Errors)
                    {
                        output.Add(((err.IsWarning) ? "Warn" : "Err: ") + err.ErrorNumber +
                            " - " + err.ErrorText);
                    }
                }
                return output;
            }
            catch
            {
                List<string> output = new List<string>();
                output.Add("IO Error occured during compile.");
                return output;
            }
        }

        private void ExecuteProgram(string dirname, string fname, string[] fparams)
        {
            this.remote_app_thread = new Thread(() => this.ExecutionThread(dirname, fname, fparams));
            this.remote_app_thread.Start();
        }

        private void ExecutionThread(string dirname, string fname, string[] fparams)
        {
            this.remote_app_domain = AppDomain.CreateDomain("ApplicationSandboxDomain");
            try
            {
                this.remote_app_domain.Load("TexploitAPI");
                AppRuntime runtime = (AppRuntime)this.remote_app_domain.CreateInstanceFromAndUnwrap("TexploitAPI.dll", "Texploit.AppRuntime");
                TexploitGameInterface iface = new TexploitGameInterface();
                runtime.InitRemoteData(iface);
                if (!runtime.ExecuteDll(".\\level_data\\" + dirname, fname, fparams))
                {
                    this.Interpreter_PushString("Couldn't find an entry point in \'" + fname + "\'.");
                    this.Interpreter_PushString("\n");
                }
                this.Interpreter_PushString("Successfully executed \'" + fname + "\'.");
                this.Interpreter_PushString("\n");
            }
            catch (AppDomainUnloadedException)
            {
                this.Interpreter_PushString("");
                this.Interpreter_PushString("Halted execution of \'" + fname + "\'.");
                this.Interpreter_PushString("\n");
            }
            catch (Exception e)
            {
                this.Interpreter_PushString("Runtime error found in \'" + fname + "\':");
                this.Interpreter_PushString("");
                this.Interpreter_PushString(e.ToString());
            }
            finally
            {
                try
                {
                    if (this.remote_app_domain != null)
                    {
                        AppDomain.Unload(this.remote_app_domain);
                        this.remote_app_domain = null;
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                }
                catch { }
            }
        }

        #endregion
    }
}
